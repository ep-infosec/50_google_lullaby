"""Generates the Lullaby entity flatbuffer schema."""

load(
    ":utils_common.bzl",
    "FLATC_DEFAULT_ARGS",
    "FLATC_DEFAULT_INCLUDES",
    "FLATC_DEFAULT_INCLUDE_PATHS",
    "FLATC_JS_DEFAULT_ARGS",
)

def generate_entity_schema(
        src,
        schema_name,
        library_name,
        includes = [],
        include_paths = [],
        js_library_name = "",
        identifier = "ENTS",
        visibility = None):
    """Generates the Lullaby entity flatbuffer schema.

    The generated schema extends a client-provided .fbs containing a
    'ComponentDef' flatbuffer union with Lullaby-specific 'EntityDef' table.
    See tools/generate_entity_schema.py for more details.

    Args:
      src: name for the fbs file containing the ComponentDef union.
      schema_name: name for the filegroup containing the generated entity.fbs
                   schema file
      library_name: name for the cc_library containing entity_generated.h
                    generated by flatc using the generated entity.fbs
      includes: Optional, list of filegroups of schemas that the srcs depend on.
      include_paths: Optional, list of paths the includes files can be found in.
      js_library_name: name for the js_library containing entity_generated.js
                       generated by flatc using the generated entity.fbs
      identifier: file_identifier for the flatbuffer type.  Only set if using
                  more than one entity schema in your app.
      visibility: Optional, the visibility of the resulting flatbuffer library.

    Deprecated:
      Use build_blueprint.bzl instead, except if you want to use the "Blueprint"
      editing feature in the editor. "Live Edit" does not require this.
    """
    script = "//lullaby/tools:generate_entity_schema"
    template = "//lullaby/tools:entity_schema.template"

    out = "generated/%s" % src
    native.genrule(
        name = "%s_generated" % schema_name,
        tools = [script],
        srcs = [template, src],
        outs = [out],
        cmd = " ".join([
            "$(location %s)" % script,
            "-i $(location %s)" % src,
            "-x $(location %s)" % template,
            "-o $(location %s)" % out,
            "--identifier %s" % identifier,
        ]),
    )

    full_includes = depset(FLATC_DEFAULT_INCLUDES + includes).to_list()
    full_include_paths = depset(FLATC_DEFAULT_INCLUDE_PATHS + include_paths).to_list()

    flatbuffer_cc_library(
        name = library_name,
        srcs = [out],
        srcs_filegroup_name = schema_name,
        include_paths = full_include_paths,
        includes = full_includes,
        visibility = visibility,
        srcs_filegroup_visibility = ["//visibility:public"],
        flatc_args = FLATC_DEFAULT_ARGS,
    )

    # Generate a filegroup for all the include files used to generate this schema.
    native.filegroup(
        name = "%s_includes" % (schema_name),
        srcs = includes,
        visibility = ["//visibility:public"],
    )
    if js_library_name:
        flatbuffer_js_library(
            name = js_library_name,
            srcs = [out],
            include_paths = full_include_paths,
            includes = full_includes,
            visibility = visibility,
            flatc_args = FLATC_JS_DEFAULT_ARGS,
            gen_reflections = True,
        )
