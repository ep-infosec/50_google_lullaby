include "lull/lull_common.fbs";

include "lull/texture_def.fbs";

namespace lull;

table ShadowMapDef {
  /// The resolution (in pixels) used for the shadow map texture. Higher
  /// resolution means better detail, but also increased performance cost.
  shadow_resolution : int = 512;

  /// The minimum distance from the light for shadows to be captured. Lower
  /// value captures objects nearer the light point. Note that high
  /// |shadow_max_distance-shadow_min_distance| value increases chances for
  /// artifacts.
  shadow_min_distance : float = 1.0;

  /// The maximum distance from the light for shadows to be captured. Higher
  /// value captures objects further away from the light point. Note that high
  /// |shadow_max_distance-shadow_min_distance| value increases chances for
  /// artifacts.
  shadow_max_distance : float = 10.0;

  /// The volume of the shadow map, excluding the distance (used for the x and y
  /// components of the orthographic projection). Higher number captures more
  /// area, but reduces the detail captured per pixel.
  shadow_volume : float = 10.0;
}

/// Union defining types of shadow implementations that may be used.
union ShadowDef {
  ShadowMapDef
}

/// Defines an ambient light source.
table AmbientLightDef {
  /// The group of lights to which this light belongs.
  group: uint = 0 (hashvalue);

  /// The color of the ambient light.
  color: Color (native_default: "{0, 0, 0, 0}");
}

/// Defines a directional light source.
table DirectionalLightDef {
  /// The group of lights to which this light belongs.
  group: uint = 0 (hashvalue);

  /// The color of the directional light.
  color: Color (native_default: "{0, 0, 0, 0}");

  /// The intensity of the directional light specular width.
  /// This field is deprecated and should not be used. If you need an exponent,
  /// set it as a uniform or property in the ModelAssetDef.
  exponent: float;

  /// Shadow implementation detail. Default is null (no shadow).
  shadow_def: ShadowDef;

  // DO NOT SET. FOR INTERNAL USE ONLY.
  rotation: Quat;
}

/// Defines a point light source.
table PointLightDef {
  /// The group of lights to which this light belongs.
  group: uint = 0 (hashvalue);

  /// The color of the point light.
  color: Color (native_default: "{0, 0, 0, 0}");

  /// The intensity of the point light.
  intensity: float = 1.0;

  /// The intensity of the point light specular width.
  /// This field is deprecated and should not be used. If you need an exponent,
  /// set it as a uniform or property in the ModelAssetDef.
  exponent: float;

  // DO NOT SET. FOR INTERNAL USE ONLY.
  position: Vec3;
}

/// Defines a spot light source.
table SpotLightDef {
  /// The group of lights to which this light belongs.
  group: uint = 0 (hashvalue);

  /// The color of the light.
  color: Color (native_default: "{0, 0, 0, 0}");

  /// The intensity of the light.
  intensity: float = 1.0;

  /// Maximum angle of light dispersion from its direction whose upper bound is
  /// 90. This value is given in degrees.
  angle: float = 45.0;

  /// Percent of the spotlight cone that is attenuated due to penumbra. Takes
  /// values between zero and 1.
  penumbra: float = 0.05;

  /// The amount the light dims along the distance of the light.
  decay: float = 2.0;

  // DO NOT SET. FOR INTERNAL USE ONLY.
  position: Vec3;

  // DO NOT SET. FOR INTERNAL USE ONLY.
  rotation: Quat;
}


/// Defines an environmental light source.
table EnvironmentLightDef {
  /// The group of lights to which this light belongs.
  group: uint = 0 (hashvalue);

  /// The texture to use for the diffuse environment map.
  diffuse: TextureDef;

  /// The texture to use for the specular environment map.
  specular: TextureDef;

  /// The bidirectional reflectance distribution function (BRDF) look-up table
  /// used to compute environment lighting.
  brdf_lookup: TextureDef;

  /// The color factor of the envionment map light.
  color: Color (native_default: "{1.0, 1.0, 1.0, 1.0}");

  // Number of mips in the specular map.
  specular_mips: int = 0;
}

/// Enum reflecting the interaction an object has with shadows. This may be
/// extended in the future.
enum ShadowInteraction : int {
  None = 0,
  CastAndReceive,
}

/// Defines an Entity that can be "lit" by the lights in the associated group.
table LightableDef {
  /// The group of lights that will be applied to this Entity.
  group: uint = 0 (hashvalue);

  /// The maximum number of ambient lights to apply to this Entity.
  max_ambient_lights: int = 0;

  /// The maximum number of directional lights to apply to this Entity.
  max_directional_lights: int = 0;

  /// The maximum number of point lights to apply to this Entity.
  max_point_lights: int = 0;

  /// Is this lightable object a shadowcaster?
  shadow_interaction: ShadowInteraction = None;

  /// The texture sampler for the shadow map texture. This should correspond to
  /// the value set for the sampler inside the shader.
  shadow_sampler: int = 5;

  /// Custom depth shader to use for rendering the shadow. If unset, default
  /// shader will be used.
  depth_shader : string;

  /// Whether or not to apply environmental light to this Entity.
  apply_environment_light: bool = false;
}
