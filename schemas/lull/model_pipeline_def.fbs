include "lull/axis_system.fbs";
include "lull/material_def.fbs";
include "lull/vertex_attribute_def.fbs";

namespace lull;

/// Information about how to import an asset into the model_pipeline.
table ModelPipelineImportDef {
  /// The short name of the asset that is referenced by the individual model
  /// components (eg. renderables, collidables, etc.) below.
  name: string;

  /// The location of disk of the asset.
  file: string;

  /// Inserts an extra node into the asset hierarchy so that the resulting model
  /// is centered around the origin.
  recenter: bool = false;

  /// Multiplier applied to the model to change its scale.
  scale: float = 1.0;

  /// The axis system used by the model asset.
  axis_system: AxisSystem = Unspecified;

  /// The limit angle (in degrees) between two normals being considered for
  /// tangent space smoothing.
  smoothing_angle : float = 45;

  /// Limit per-vertex bone weights to the N most significant bones.
  max_bone_weights : int = 4;

  /// some clients do not use LOG to report errors
  report_errors_to_stdout : bool = false;

  /// Inverts vertical texture coordinates when enabled (D3D/OGL difference).
  flip_texture_coordinates : bool = false;

  /// Pre-transforms vertices by their node hierarchy so that all vertices are
  /// in the same object-space, and the node hierarchy is flattened.
  flatten_hierarchy_and_transform_vertices_to_root_space : bool = false;

  /// If a model contains both metallic-roughness textures and
  /// specular-glossiness textures, this flag causes the import to only use the
  /// specular-glossiness textures. Otherwise, it uses the metallic-rougness
  /// textures.
  use_specular_glossiness_textures_if_present : bool = false;

  /// Toggle for Assimp's aiProcess_FixInfacingNormals process.
  fix_infacing_normals : bool = true;

  /// Encodes a sign into the w value of the orientation quaternion such that >0
  /// implies a right handed space, and <0 implies a left handed space. w==0
  /// should never happen. This allows orientation components to be encoded in a
  // 16 bit int.
  ensure_vertex_orientation_w_not_zero : bool = false;

  /// Distinct from 'scale'; defines the unit we expect positions to be in.
  /// Kept as 0 for backwards compatibility, this would be 100.0 for contexts
  /// where world units would be measured in meters, and 2.54 for inches.
  cm_per_unit : float = 0.0;
}

/// Information about a renderable material.
table ModelPipelineMaterialDef {
  /// Description of the desired material.
  material: MaterialDef;

  /// Optional replacement name to use at runtime.
  name_override: string;
}

/// Information about a renderable model.
table ModelPipelineRenderableDef {
  /// The name of ModelPipelineImportDef defining this model.
  source: string;

  /// The material properties for the model. Each index in the array corresponds
  /// to a submesh in the model.
  materials: [ModelPipelineMaterialDef];

  /// Specific vertex attributes to export. For multiple attributes with the
  /// same usage (eg. two uv-coords for textures), simply list the attribute
  /// twice, regardless of order.
  attributes: [VertexAttributeUsage];
}

/// Information about a collidable model.
table ModelPipelineCollidableDef {
  /// The name of ModelPipelineImportDef defining this model.
  source: string;
}

/// Information about an animatable model.
table ModelPipelineSkeletonDef {
  /// The name of ModelPipelineImportDef defining this model.
  source: string;
}

/// An optional configuration file that can be provided to the model pipeline
/// to control behaviour.
table ModelPipelineDef {
  /// The list of assets to import.
  sources: [ModelPipelineImportDef];

  /// The list of models used for rendering. Each index in the list specifies
  /// an LOD level.
  renderables: [ModelPipelineRenderableDef];

  /// The model used for collision.
  collidable: ModelPipelineCollidableDef;

  /// The model used for skeletal animations.
  skeleton: ModelPipelineSkeletonDef;

  /// The textures to be used by the renderables.
  textures: [TextureDef];
}
