include "lull/lull_common.fbs";

namespace lull;

// Texture wrap mode.
enum TextureWrap : ushort {
  ClampToBorder,     // Corresponds to GL_CLAMP_TO_BORDER.
  ClampToEdge,       // Corresponds to GL_CLAMP_TO_BORDER.
  MirroredRepeat,    // Corresponds to GL_MIRRORED_REPEAT.
  MirrorClampToEdge, // Corresponds to GL_MIRROR_CLAMP_TO_EDGE.
  Repeat,            // Corresponds to GL_REPEAT.
}

enum TextureFiltering : ushort {
  // Corresponds to GL_NEAREST. Returns the value of the texture element that is
  // nearest (in Manhattan distance) to the center of the pixel being textured.
  Nearest,
  // Corresponds to GL_LINEAR. Returns the weighted average of the four texture
  // elements that are closest to the center of the pixel being textured. These
  // can include border texture elements, depending on the values of texture
  // wrap_s and texture wrap_t, and on the exact mapping.
  Linear,
  // Corresponds to GL_NEAREST_MIPMAP_NEAREST. Chooses the mipmap that most
  // closely matches the size of the pixel being textured and uses the "Nearest"
  // criterion (the texture element nearest to the center of the pixel) to
  // produce a texture value.
  NearestMipmapNearest,
  // Corresponds to GL_LINEAR_MIPMAP_NEAREST. Chooses the mipmap that most
  // closely matches the size of the pixel being textured and uses the "Linear"
  // criterion (a weighted average of the four texture elements that are closest
  // to the center of the pixel) to produce a texture value.
  LinearMipmapNearest,
  // Corresponds to GL_NEAREST_MIPMAP_LINEAR. Chooses the two mipmaps that most
  // closely match the size of the pixel being textured and uses the "Nearest"
  // criterion (the texture element nearest to the center of the pixel) to
  // produce a texture value from each mipmap. The final texture value is a
  // weighted average of those two values.
  NearestMipmapLinear,
  // Corresponds to GL_LINEAR_MIPMAP_LINEAR. Chooses the two mipmaps that most
  // closely match the size of the pixel being textured and uses the "Linear"
  // criterion (a weighted average of the four texture elements that are closest
  // to the center of the pixel) to produce a texture value from each mipmap.
  // The final texture value is a weighted average of those two values.
  LinearMipmapLinear,
}

enum TextureTargetType : ushort {
  Standard2d,
  CubeMap,
}

// Definition of a texture resource.
table TextureDef {
  // Name of the texture resource (used when referring to this instance).
  name: string;

  // Path to the texture file to be used.
  file: string;

  // Binary data containing the texture data.
  data: [uint8];

  // Flag that specifies whether the texture mip chain should be automatically
  // generated (note: this does not apply to GPU compressed texture formats).
  generate_mipmaps: bool = false;

  // Whether or not the texture should have alpha premultiplied.
  premultiply_alpha: bool = false;

  // The texture minifying function is used whenever the pixel being textured
  // maps to an area greater than one texture element. There are six defined
  // minifying functions. Two of them use the nearest one or nearest four
  // texture elements to compute the texture value. The other four use mipmaps.
  //
  // The allowed TextureFiltering options are: [Nearest, Linear,
  //   NearestMipmapNearest, LinearMipmapNearest, NearestMipmapLinear,
  //   LinearMipmapLinear].
  min_filter: TextureFiltering = NearestMipmapLinear;

  // The texture magnification function is used when the pixel being textured
  // maps to an area less than or equal to one texture element.
  //
  // The allowed TextureFiltering options are: [Nearest, Linear]
  mag_filter: TextureFiltering = Linear;

  // Sets the wrap parameter for texture coordinate s.
  wrap_s : TextureWrap = Repeat;
  // Sets the wrap parameter for texture coordinate t.
  wrap_t : TextureWrap = Repeat;
  // Sets the wrap parameter for texture coordinate r.
  wrap_r : TextureWrap = Repeat;

  // The type of texture (eg. 2D, CubeMap).
  target_type: TextureTargetType = Standard2d;

  // Indicates that the texture is storing HDR image data where the multiplier
  // to be applied to the RGB data is encoded into the alpha channel.
  is_rgbm: bool = false;
}
