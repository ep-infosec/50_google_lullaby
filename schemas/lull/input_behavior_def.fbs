include "lull/lull_common.fbs";

namespace lull;

enum InputBehaviorType : int {
  /// Handle the collision directly on this entity.
  HandleAlone,
  /// Traverse to parents to find an entity with |HandleDescendants|.
  FindAncestor,
  /// Handle reticle collisions passed from descendants with |FindAncestor|.
  HandleDescendants,
}

/// InputBehaviorDef modifies how an entity will interact with input that
/// causes focus.
table InputBehaviorDef {
  /// Scales the entity's Aabb down when determining if it is targeted.
  /// Specifically, the dead zone is the outer part of the Aabb that will not
  /// trigger a focus-start event even if being collided with. This is useful
  /// for entities that change positions when targeted, which could move them
  /// out of collision and result in bouncing. These values can only shrink the
  /// Aabb, and should be absolute values. They will be applied to both sides of
  /// the Aabb. For example, an entity centered at origin with a 3x3x3 Aabb with
  /// a dead zone of (0.5,1,0.5) will only become targeted when the reticle
  /// collides with the 2x1x2 Aabb centered at the origin.
  focus_start_dead_zone: Vec3;

  /// How this entity should handle receiving focus.  This is usually used to
  /// make descendants of an entity be 'grouped' into a single focusable object.
  behavior_type: InputBehaviorType = HandleAlone;

  /// If set to true and this entity has HandleDescendants, it's interactivity
  /// and default interactivity will be set. Ignored if |behavior_type| is
  /// not HandleDescendants.
  interactive_if_handle_descendants: bool = true;

  /// If set to True, the entity will receive DragStart and DragStop events.
  /// If False, the entity can still receive Click events beyond the drag slop
  /// ray threshold.
  /// If Unset, it will default to False but won't overwrite any value set by
  /// InputBehaviorSystem::SetDraggable().
  draggable: OptionalBool = Unset;
}
